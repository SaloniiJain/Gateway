{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\froman\fprq2\fcharset0 Calibri;}{\f6\froman\fprq2\fcharset0 Symbol;}{\f7\fnil\fprq0\fcharset0 Roboto{\*\falt sans-serif};}{\f8\froman\fprq2\fcharset128 Times New Roman;}{\f9\fnil\fprq0\fcharset0 Consolas{\*\falt Courier New};}{\f10\fnil\fprq2\fcharset0 Microsoft YaHei;}{\f11\fnil\fprq2\fcharset0 Arial;}{\f12\fswiss\fprq0\fcharset128 Arial;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red212\green212\blue212;\red220\green220\blue170;\red86\green156\blue214;\red206\green145\blue120;\red156\green220\blue254;\red68\green68\blue68;\red30\green30\blue30;}
{\stylesheet{\s0\snext0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1 Normal;}
{\*\cs15\snext15\hich\af0\loch\f0\fs28\b0 ListLabel 1;}
{\*\cs16\snext16\hich\af6\loch\f6 ListLabel 2;}
{\s17\sbasedon0\snext18\dbch\af10\dbch\af11\afs28\sb240\sa120\keepn\loch\f4\fs28 Heading;}
{\s18\sbasedon0\snext18\sl276\slmult1\sb0\sa140 Text Body;}
{\s19\sbasedon18\snext19\dbch\af12\sl276\slmult1\sb0\sa140 List;}
{\s20\sbasedon0\snext20\dbch\af12\afs24\ai\sb120\sa120\noline\fs24\i Caption;}
{\s21\sbasedon0\snext21\dbch\af12\noline Index;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc23\leveljc0\levelstartat0\levelfollow0{\leveltext \'01\u183 ?;}{\levelnumbers;}\f1\fs28\b0\fi0\li0}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-360\li1080}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-360\li1440}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-360\li1800}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-360\li2160}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-360\li2520}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-360\li2880}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-360\li3240}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-360\li3600}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}\listid2}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}{\*\generator LibreOffice/7.0.4.2$Windows_X86_64 LibreOffice_project/dcf040e67528d9187c66b2379df5ea4407429775}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr2021\mo3\dy17\hr16\min21}{\printim\yr0\mo0\dy0\hr0\min0}}{\*\userprops}\deftab720
\hyphauto1\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1440\pgdscnxt0 Default Page Style;}}
\formshade{\*\pgdscno0}\paperh15840\paperw12240\margl1440\margr1440\margt1440\margb1440\sectd\sbknone\pgndec\sftnnar\saftnnrlc\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1440\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\qc\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang9\b\loch\f0\loch
Assignment 1}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang9\b0\loch\f0\loch
1. Write brief description about unit testing and functional testing and its        benefits as developers perspective?}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang9\b\loch\f0\loch
Unit testing -}{\rtlch\hich\af0 \ltrch\fs28\lang9\b0\loch\f0\loch
 A Unit test is the procedure to check the proper functioning of a specific part of a software or a portion of a program.This is sometimes also called Isolated testing. Unit tests can be used to test the services by invoking the functionality directly. Unit testing can be used to invoke and test the behavior of a piece of code in isolation. The reusable logic written in services requires this kind of testing, as unit testing provides ways to test all possible scenarios by sending different types of data to the service methods. The most crucial tools used for Angular unit testing\u8212\'97Karma and Jasmine.}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
Benefits of Unit Tes}{\rtlch\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
t}{\rtlch\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
ing - }
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1{\listtext\pard\plain \hich\af0\loch\f0\fs28\b0 \u183\'b7\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\ql\li720\ri0\lin720\rin0\fi-360\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
Debugging is easy. When a test fails, only the latest changes need to be debugged. }
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1{\listtext\pard\plain \hich\af0\loch\f0\fs28\b0 \u183\'b7\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\ql\li720\ri0\lin720\rin0\fi-360\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
Codes are more reusable. In order to make unit testing possible, codes need to be modular. This means that codes are easier to reuse.}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1{\listtext\pard\plain \hich\af0\loch\f0\fs28\b0 \u183\'b7\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\ql\li720\ri0\lin720\rin0\fi-360\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
If good unit tests are written and if they are run every time any code is changed, we will be able to promptly catch any defects introduced due to the change. }
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1{\listtext\pard\plain \hich\af0\loch\f0\fs28\b0 \u183\'b7\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\ql\li720\ri0\lin720\rin0\fi-360\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
The cost of fixing a defect detected during unit testing is lesser in comparison to that of defects detected at higher levels. }
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
Fun}{\rtlch\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
c}{\rtlch\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
tional Testing }{\rtlch\ab0\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
-}{\rtlch\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
  }{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
As it's name defines ,it is the testing of the complete functionality of an application. This is also called End to End or E2E testing.  E2E test put his goal to verify that all features and functionalities work correctly together.}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
End to End testing is a methodol}{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
o}{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
gy used to test an application from a user's perspective. The tests ensure the application performs as expected from start to finish. As the tests run, you will see the browser interaction just as a user would use your application. Angular end to end tests are powered by a framework called Protractor.}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
Benefits of Functional Tes}{\rtlch\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
t}{\rtlch\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
ing - }
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1{\listtext\pard\plain \hich\af0\loch\f0\fs28\b0 \u183\'b7\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\ql\li720\ri0\lin720\rin0\fi-360\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
Functional testing ensures that the system will work according to the requirements. Basically, it tells us that what is the problem in the functionality.}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
2.Where and why you need Unit testing in your project, give me 10 example and code snap?}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\afs28\ab\hich\af8 \ltrch\scaps0\caps0\cf22\fs28\expnd0\expndtw0\lang1033\i0\b\loch\f8\loch
When and Why:  }{\rtlch\afs28\hich\af8 \ltrch\scaps0\caps0\cf22\fs28\expnd0\expndtw0\lang1033\i0\b0\loch\f8\loch
Unit tests enable programmers to change code more easily, with more confidence and less side effects. It promotes / enables refactoring of code which without unit tests can be dangerous. With all this in mind I find unit testing will make our code better.}{\rtlch\hich\af0 \ltrch\fs28\lang1033\b0\loch\f0\loch
 }
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
Code Snap:}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
1. it('should create', () => \{}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
expect(component).toBeTruthy();}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
  }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
\});}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
2. it('should create the app', () => \{}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
const fixture = TestBed.createComponent(AppComponent);}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
const app = fixture.componentInstance;}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
expect(app).toBeTruthy();}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
\});}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar\rtlch\ab \ltrch\b\loch

\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
3.it(`should have as title 'demo-app'`, () => \{}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
const fixture = TestBed.createComponent(AppComponent);}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
const app = fixture.componentInstance;}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
expect(app.title).toEqual('demo-app');}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
\});}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar\rtlch\ab \ltrch\b\loch

\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
4. it('should render title', () => \{}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
const fixture = TestBed.createComponent(AppComponent);}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
fixture.detectChanges();}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
const compiled = fixture.nativeElement;}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0
    }{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
expect(compiled.querySelector('.content span').textContent).toContain('demo-app app is running!');}
\par \pard\plain \s0\hich\af3\dbch\af13\langfe2052\dbch\af11\afs24\alang1081\nowidctlpar\hyphpar0\ltrpar\cf0\loch\f3\fs24\lang1033\kerning1\sl276\slmult1\ql\sb0\sa200\ltrpar{\rtlch\ab\hich\af0 \ltrch\fs28\lang1033\b\loch\f0\loch
\});}
\par }